-- MySQL Script generated by MySQL Workbench
-- Tue Jul  9 10:46:31 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema teltonika
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `teltonika` ;

-- -----------------------------------------------------
-- Schema teltonika
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `teltonika` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `teltonika` ;

-- -----------------------------------------------------
-- Table `teltonika`.`beacons`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`beacons` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`beacons` (
  `id` VARCHAR(50) NOT NULL,
  `lugar` VARCHAR(255) NULL DEFAULT NULL,
  `ubicacion` VARCHAR(255) NULL DEFAULT NULL,
  `esPuerta` TINYINT NULL DEFAULT '0',
  `mac` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `mac_UNIQUE` (`mac` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`beacons_detection_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`beacons_detection_status` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`beacons_detection_status` (
  `id_status` INT NOT NULL AUTO_INCREMENT,
  `status_timestamp` TIMESTAMP NOT NULL,
  `Sector_1` ENUM('Negro', 'Rojo', 'Amarillo', 'Verde') NOT NULL DEFAULT 'Negro',
  `Sector_2` ENUM('Negro', 'Rojo', 'Amarillo', 'Verde') NOT NULL DEFAULT 'Negro',
  `Sector_3` ENUM('Negro', 'Rojo', 'Amarillo', 'Verde') NOT NULL DEFAULT 'Negro',
  `Sector_4` ENUM('Negro', 'Rojo', 'Amarillo', 'Verde') NOT NULL DEFAULT 'Negro',
  `Sector_5` ENUM('Negro', 'Rojo', 'Amarillo', 'Verde') NOT NULL DEFAULT 'Negro',
  PRIMARY KEY (`id_status`))
ENGINE = InnoDB
AUTO_INCREMENT = 1544
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`beacons_detection_status_acumulado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`beacons_detection_status_acumulado` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`beacons_detection_status_acumulado` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `sector_id` VARCHAR(45) NOT NULL,
  `acumulado_timestamp` TIMESTAMP NOT NULL,
  `total_lapsus_acumulado` INT NULL DEFAULT NULL,
  `total_negro` INT NULL DEFAULT '0',
  `total_rojo` INT NULL DEFAULT '0',
  `total_amarillo` INT NULL DEFAULT '0',
  `total_verde` INT NULL DEFAULT '0',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`sectores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`sectores` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`sectores` (
  `id` VARCHAR(255) NOT NULL,
  `nombre` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`configuracion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`configuracion` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`configuracion` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `beacon_id` VARCHAR(255) NULL DEFAULT NULL,
  `min_tiempo_permanencia` INT NULL DEFAULT NULL,
  `max_tiempo_permanencia` INT NULL DEFAULT NULL,
  `umbral_verde` INT NULL DEFAULT NULL,
  `umbral_amarillo` INT NULL DEFAULT NULL,
  `umbral_rojo` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `configuracion_ibfk_1` (`beacon_id` ASC) VISIBLE,
  CONSTRAINT `configuracion_ibfk_1`
    FOREIGN KEY (`beacon_id`)
    REFERENCES `teltonika`.`sectores` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`debug_beacon_count`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`debug_beacon_count` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`debug_beacon_count` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `sector` VARCHAR(20) NULL DEFAULT NULL,
  `beacon_id` VARCHAR(45) NULL DEFAULT NULL,
  `count` INT NULL DEFAULT NULL,
  `timestamp` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 7676
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`devices`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`devices` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`devices` (
  `id` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `device_asignado` CHAR(30) NOT NULL,
  `telefono` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `telefono_UNIQUE` (`telefono` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`door_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`door_status` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`door_status` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `sector` VARCHAR(255) NULL DEFAULT NULL,
  `magnet_status` TINYINT NULL DEFAULT NULL,
  `temperature` FLOAT NULL DEFAULT NULL,
  `timestamp` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 21123
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`fmb204_data_352592576164230`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`fmb204_data_352592576164230` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`fmb204_data_352592576164230` (
  `id_generico` INT NOT NULL AUTO_INCREMENT,
  `id_dispo` VARCHAR(255) NULL DEFAULT NULL,
  `ID_GPS_DATA` INT NULL DEFAULT NULL,
  `device_id_gps_data` BIGINT NULL DEFAULT NULL,
  `event_enum` INT NULL DEFAULT NULL,
  `altitude` DECIMAL(10,2) NULL DEFAULT NULL,
  `latitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `longitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `timestamp` BIGINT NULL DEFAULT NULL,
  `beacon_id` VARCHAR(50) NULL DEFAULT NULL,
  `rsi_beacon` INT NULL DEFAULT NULL,
  `battery_level` INT NULL DEFAULT NULL,
  `ble_sensor_humidity` INT NULL DEFAULT NULL,
  `ble_sensor_magnet_status` TINYINT NULL DEFAULT NULL,
  `ble_sensor_temperature` INT NULL DEFAULT NULL,
  `EYE_battery.low` TINYINT NULL DEFAULT NULL,
  `EYE_humidity` INT NULL DEFAULT NULL,
  `EYE_id` VARCHAR(50) NULL DEFAULT NULL,
  `EYE_mac.address` VARCHAR(45) NULL DEFAULT NULL,
  `EYE_magnet` TINYINT NULL DEFAULT NULL,
  `EYE_magnet.count` INT NULL DEFAULT NULL,
  `EYE_movement` TINYINT NULL DEFAULT NULL,
  `EYE_movement.count` INT NULL DEFAULT NULL,
  `EYE_temperature` DECIMAL(5,2) NULL DEFAULT NULL,
  `EYE_type` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id_generico`),
  UNIQUE INDEX `id_generico_UNIQUE` (`id_generico` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 50841
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`gh_5200_data_352592573522828`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`gh_5200_data_352592573522828` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`gh_5200_data_352592573522828` (
  `id_generico` INT NOT NULL AUTO_INCREMENT,
  `id_dispo` VARCHAR(255) NULL DEFAULT NULL,
  `ID_GPS_DATA` INT NULL DEFAULT NULL,
  `device_id_gps_data` BIGINT NULL DEFAULT NULL,
  `event_enum` INT NULL DEFAULT NULL,
  `altitude` DECIMAL(10,2) NULL DEFAULT NULL,
  `latitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `longitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `timestamp` BIGINT NULL DEFAULT NULL,
  `beacon_id` VARCHAR(50) NULL DEFAULT NULL,
  `rsi_beacon` INT NULL DEFAULT NULL,
  `battery_level` INT NULL DEFAULT NULL,
  `ble_sensor_humidity` INT NULL DEFAULT NULL,
  `ble_sensor_magnet_status` TINYINT NULL DEFAULT NULL,
  `ble_sensor_temperature` INT NULL DEFAULT NULL,
  `EYE_battery.low` TINYINT NULL DEFAULT NULL,
  `EYE_humidity` INT NULL DEFAULT NULL,
  `EYE_id` VARCHAR(50) NULL DEFAULT NULL,
  `EYE_mac.address` VARCHAR(45) NULL DEFAULT NULL,
  `EYE_magnet` TINYINT NULL DEFAULT NULL,
  `EYE_magnet.count` INT NULL DEFAULT NULL,
  `EYE_movement` TINYINT NULL DEFAULT NULL,
  `EYE_movement.count` INT NULL DEFAULT NULL,
  `EYE_temperature` DECIMAL(5,2) NULL DEFAULT NULL,
  `EYE_type` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id_generico`),
  UNIQUE INDEX `id_generico_UNIQUE` (`id_generico` ASC) VISIBLE,
  INDEX `fk_dispo` (`id_dispo` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 604143
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`gps_data`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`gps_data` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`gps_data` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `device_id` BIGINT NULL DEFAULT NULL,
  `device_name` VARCHAR(255) NULL DEFAULT NULL,
  `device_type_id` INT NULL DEFAULT NULL,
  `event_enum` INT NULL DEFAULT NULL,
  `event_priority_enum` INT NULL DEFAULT NULL,
  `ident` VARCHAR(255) NULL DEFAULT NULL,
  `peer` VARCHAR(255) NULL DEFAULT NULL,
  `altitude` DECIMAL(10,2) NULL DEFAULT NULL,
  `direction` DECIMAL(10,2) NULL DEFAULT NULL,
  `latitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `longitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `satellites` INT NULL DEFAULT NULL,
  `speed` DECIMAL(10,2) NULL DEFAULT NULL,
  `protocol_id` INT NULL DEFAULT NULL,
  `server_timestamp` BIGINT NULL DEFAULT NULL,
  `timestamp` BIGINT NULL DEFAULT NULL,
  `ble_beacons` TEXT NULL DEFAULT NULL,
  `channel_id` INT NULL DEFAULT NULL,
  `codec_id` INT NULL DEFAULT NULL,
  `battery_level` INT NULL DEFAULT NULL,
  `battery_voltage` DECIMAL(10,3) NULL DEFAULT NULL,
  `battery_current` DECIMAL(10,3) NULL DEFAULT NULL,
  `ble_sensor_humidity_1` INT NULL DEFAULT NULL,
  `ble_sensor_humidity_2` INT NULL DEFAULT NULL,
  `ble_sensor_humidity_3` INT NULL DEFAULT NULL,
  `ble_sensor_humidity_4` INT NULL DEFAULT NULL,
  `ble_sensor_low_battery_status_1` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_low_battery_status_2` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_magnet_status_1` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_magnet_status_2` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_magnet_count_1` INT NULL DEFAULT NULL,
  `ble_sensor_magnet_count_2` INT NULL DEFAULT NULL,
  `ble_sensor_temperature_1` DECIMAL(5,2) NULL DEFAULT NULL,
  `ble_sensor_temperature_2` DECIMAL(5,2) NULL DEFAULT NULL,
  `ble_sensor_temperature_3` DECIMAL(5,2) NULL DEFAULT NULL,
  `ble_sensor_temperature_4` DECIMAL(5,2) NULL DEFAULT NULL,
  `bluetooth_state_enum` INT NULL DEFAULT NULL,
  `gnss_state_enum` INT NULL DEFAULT NULL,
  `gnss_status` TINYINT(1) NULL DEFAULT NULL,
  `gnss_sleep_mode_status` TINYINT(1) NULL DEFAULT NULL,
  `gsm_mcc` INT NULL DEFAULT NULL,
  `gsm_mnc` INT NULL DEFAULT NULL,
  `gsm_operator_code` VARCHAR(10) NULL DEFAULT NULL,
  `gsm_signal_level` INT NULL DEFAULT NULL,
  `movement_status` TINYINT(1) NULL DEFAULT NULL,
  `position_hdop` DECIMAL(5,1) NULL DEFAULT NULL,
  `position_pdop` DECIMAL(5,1) NULL DEFAULT NULL,
  `position_valid` TINYINT(1) NULL DEFAULT NULL,
  `position_fix_age` INT NULL DEFAULT NULL,
  `sleep_mode_enum` INT NULL DEFAULT NULL,
  `custom_param_116` INT NULL DEFAULT NULL,
  `engine_ignition_status` TINYINT(1) NULL DEFAULT NULL,
  `external_powersource_voltage` DECIMAL(10,3) NULL DEFAULT NULL,
  `vehicle_mileage` DECIMAL(10,3) NULL DEFAULT NULL,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 155947
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`gps_data_backup`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`gps_data_backup` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`gps_data_backup` (
  `id` INT NOT NULL DEFAULT '0',
  `device_id` BIGINT NULL DEFAULT NULL,
  `device_name` VARCHAR(255) NULL DEFAULT NULL,
  `device_type_id` INT NULL DEFAULT NULL,
  `event_enum` INT NULL DEFAULT NULL,
  `event_priority_enum` INT NULL DEFAULT NULL,
  `ident` VARCHAR(255) NULL DEFAULT NULL,
  `peer` VARCHAR(255) NULL DEFAULT NULL,
  `altitude` DECIMAL(10,2) NULL DEFAULT NULL,
  `direction` DECIMAL(10,2) NULL DEFAULT NULL,
  `latitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `longitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `satellites` INT NULL DEFAULT NULL,
  `speed` DECIMAL(10,2) NULL DEFAULT NULL,
  `protocol_id` INT NULL DEFAULT NULL,
  `server_timestamp` BIGINT NULL DEFAULT NULL,
  `timestamp` BIGINT NULL DEFAULT NULL,
  `ble_beacons` TEXT NULL DEFAULT NULL,
  `channel_id` INT NULL DEFAULT NULL,
  `codec_id` INT NULL DEFAULT NULL,
  `battery_level` INT NULL DEFAULT NULL,
  `battery_voltage` DECIMAL(10,2) NULL DEFAULT NULL,
  `ble_sensor_humidity_1` INT NULL DEFAULT NULL,
  `ble_sensor_humidity_2` INT NULL DEFAULT NULL,
  `ble_sensor_humidity_3` INT NULL DEFAULT NULL,
  `ble_sensor_humidity_4` INT NULL DEFAULT NULL,
  `ble_sensor_low_battery_status_1` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_magnet_status_1` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_temperature_1` INT NULL DEFAULT NULL,
  `ble_sensor_temperature_2` INT NULL DEFAULT NULL,
  `ble_sensor_temperature_3` INT NULL DEFAULT NULL,
  `ble_sensor_temperature_4` INT NULL DEFAULT NULL,
  `bluetooth_state_enum` INT NULL DEFAULT NULL,
  `gnss_state_enum` INT NULL DEFAULT NULL,
  `gnss_status` TINYINT(1) NULL DEFAULT NULL,
  `gsm_mcc` INT NULL DEFAULT NULL,
  `gsm_mnc` INT NULL DEFAULT NULL,
  `gsm_operator_code` VARCHAR(10) NULL DEFAULT NULL,
  `gsm_signal_level` INT NULL DEFAULT NULL,
  `movement_status` TINYINT(1) NULL DEFAULT NULL,
  `position_hdop` INT NULL DEFAULT NULL,
  `position_pdop` INT NULL DEFAULT NULL,
  `position_valid` TINYINT(1) NULL DEFAULT NULL,
  `sleep_mode_enum` INT NULL DEFAULT NULL,
  `custom_param_116` INT NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`magic_box_tmt_210_data_353201350896384`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`magic_box_tmt_210_data_353201350896384` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`magic_box_tmt_210_data_353201350896384` (
  `id_generico` INT NOT NULL AUTO_INCREMENT,
  `id_dispo` VARCHAR(255) NULL DEFAULT NULL,
  `ID_GPS_DATA` INT NULL DEFAULT NULL,
  `device_id_gps_data` BIGINT NULL DEFAULT NULL,
  `event_enum` INT NULL DEFAULT NULL,
  `altitude` DECIMAL(10,2) NULL DEFAULT NULL,
  `latitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `longitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `timestamp` BIGINT NULL DEFAULT NULL,
  `beacon_id` VARCHAR(50) NULL DEFAULT NULL,
  `rsi_beacon` INT NULL DEFAULT NULL,
  `battery_level` INT NULL DEFAULT NULL,
  `ble_sensor_humidity` INT NULL DEFAULT NULL,
  `ble_sensor_magnet_status` TINYINT NULL DEFAULT NULL,
  `ble_sensor_temperature` INT NULL DEFAULT NULL,
  `EYE_battery.low` TINYINT NULL DEFAULT NULL,
  `EYE_humidity` INT NULL DEFAULT NULL,
  `EYE_id` VARCHAR(50) NULL DEFAULT NULL,
  `EYE_mac.address` VARCHAR(45) NULL DEFAULT NULL,
  `EYE_magnet` TINYINT NULL DEFAULT NULL,
  `EYE_magnet.count` INT NULL DEFAULT NULL,
  `EYE_movement` TINYINT NULL DEFAULT NULL,
  `EYE_movement.count` INT NULL DEFAULT NULL,
  `EYE_temperature` DECIMAL(5,2) NULL DEFAULT NULL,
  `EYE_type` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id_generico`),
  UNIQUE INDEX `id_generico_UNIQUE` (`id_generico` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 25108
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`parametrizaciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`parametrizaciones` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`parametrizaciones` (
  `param_id` INT NOT NULL AUTO_INCREMENT,
  `nombre_parametro` VARCHAR(100) NOT NULL,
  `minimo` INT NOT NULL,
  `maximo` INT NULL DEFAULT NULL,
  PRIMARY KEY (`param_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci
COMMENT = 'Tabla de parametros de sistema';


-- -----------------------------------------------------
-- Table `teltonika`.`parametro_color`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`parametro_color` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`parametro_color` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `umbral_min_verde` INT NOT NULL,
  `umbral_min_rojo` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`personal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`personal` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`personal` (
  `id_personal` INT NOT NULL AUTO_INCREMENT,
  `Nombre_Personal` VARCHAR(45) NOT NULL,
  `id_dispositivo_asignado` VARCHAR(255) NULL DEFAULT NULL,
  `imagen_asignado` VARCHAR(45) NULL DEFAULT NULL,
  `device_asignado_personal` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id_personal`),
  UNIQUE INDEX `id_personal_UNIQUE` (`id_personal` ASC) VISIBLE,
  UNIQUE INDEX `id_dispositivo_asignado_UNIQUE` (`id_dispositivo_asignado` ASC) VISIBLE,
  INDEX `FK_idx` (`id_dispositivo_asignado` ASC) VISIBLE,
  CONSTRAINT `id_dispositivo`
    FOREIGN KEY (`id_dispositivo_asignado`)
    REFERENCES `teltonika`.`devices` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`process_log`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`process_log` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`process_log` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `message` VARCHAR(255) NULL DEFAULT NULL,
  `timestamp` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 72802
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`process_state`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`process_state` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`process_state` (
  `last_processed_id` BIGINT NULL DEFAULT NULL,
  `total_processed` BIGINT NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`sms_data`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`sms_data` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`sms_data` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `device_id` VARCHAR(255) NOT NULL,
  `message` TEXT NOT NULL,
  `timestamp` DATETIME NOT NULL,
  `latitud` FLOAT NULL DEFAULT NULL,
  `longitud` FLOAT NULL DEFAULT NULL,
  `sector` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 148
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`umbrales`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`umbrales` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`umbrales` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `umbral_verde` INT NOT NULL,
  `umbral_amarillo` INT NOT NULL,
  `umbral_rojo` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `teltonika`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonika`.`users` ;

CREATE TABLE IF NOT EXISTS `teltonika`.`users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `resetToken` VARCHAR(255) NULL DEFAULT NULL,
  `resetTokenExpiry` BIGINT NULL DEFAULT NULL,
  `permissions` VARCHAR(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 9
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `teltonika` ;

-- -----------------------------------------------------
-- procedure CalcularLapsosMediaHora
-- -----------------------------------------------------

USE `teltonika`;
DROP procedure IF EXISTS `teltonika`.`CalcularLapsosMediaHora`;

DELIMITER $$
USE `teltonika`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CalcularLapsosMediaHora`(
    OUT lapsos_transcurridos INT
)
BEGIN
    DECLARE tiempo_transcurrido TIME;
    DECLARE minutos_transcurridos INT;

    -- Obtener el tiempo transcurrido
    SELECT TIMEDIFF(TIME(NOW()), '00:00:00') INTO tiempo_transcurrido;

    -- Convertir el tiempo transcurrido a minutos
    SET minutos_transcurridos = 
        HOUR(tiempo_transcurrido) * 60 + MINUTE(tiempo_transcurrido);

    -- Calcular cuántos lapsos de media hora han pasado
    SET lapsos_transcurridos = FLOOR(minutos_transcurridos / 30);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ObtenerValorString
-- -----------------------------------------------------

USE `teltonika`;
DROP procedure IF EXISTS `teltonika`.`ObtenerValorString`;

DELIMITER $$
USE `teltonika`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ObtenerValorString`(
    IN p_input_string TEXT,
    IN p_key VARCHAR(50),
    OUT p_value VARCHAR(255)
)
BEGIN
    DECLARE v_start INT;
    DECLARE v_end INT;
    DECLARE v_search VARCHAR(55);
    
    -- Preparar la cadena de búsqueda
    SET v_search = CONCAT('"', p_key, '":');
    
    -- Encontrar la posición inicial del valor
    SET v_start = LOCATE(v_search, p_input_string);
    
    IF v_start > 0 THEN
        -- Ajustar la posición inicial al comienzo del valor
        SET v_start = v_start + LENGTH(v_search);
        
        -- Encontrar el final del valor
        SET v_end = LOCATE(',', p_input_string, v_start);
        
        -- Si no hay coma, buscar el final del objeto
        IF v_end = 0 THEN
            SET v_end = LOCATE('}', p_input_string, v_start);
        END IF;
        
        -- Extraer el valor
        IF v_end > v_start THEN
            SET p_value = SUBSTRING(p_input_string, v_start, v_end - v_start);
        ELSE
            SET p_value = SUBSTRING(p_input_string, v_start);
        END IF;
        
        -- Limpiar el valor de comillas si es necesario
        SET p_value = TRIM(BOTH '"' FROM p_value);
        
        -- Manejar valores booleanos
        IF p_value = 'true' THEN
            SET p_value = '1';
        ELSEIF p_value = 'false' THEN
            SET p_value = '0';
        END IF;
    ELSE
        SET p_value = NULL;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure calcular_diferencia_minutos
-- -----------------------------------------------------

USE `teltonika`;
DROP procedure IF EXISTS `teltonika`.`calcular_diferencia_minutos`;

DELIMITER $$
USE `teltonika`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `calcular_diferencia_minutos`(IN timestamp1 BIGINT, IN timestamp2 BIGINT, OUT diferencia_minutos INT)
BEGIN
    SET diferencia_minutos = (timestamp2 - timestamp1) / 60;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCantidadColorSemaforoTotales
-- -----------------------------------------------------

USE `teltonika`;
DROP procedure IF EXISTS `teltonika`.`obtenerCantidadColorSemaforoTotales`;

DELIMITER $$
USE `teltonika`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `obtenerCantidadColorSemaforoTotales`(
	IN sector INT,
    IN color VARCHAR(45),
    OUT totales INT
)
BEGIN
    DECLARE tiempo_transcurrido TIME;
    DECLARE minutos_transcurridos INT;
    
    IF sector = 1 THEN
		SELECT
			COUNT(*) INTO totales
		FROM beacons_detection_status
		WHERE
			DATE(status_timestamp) = CURDATE()
		AND
			TIME(status_timestamp) <= CURTIME()
		AND
			Sector_1 = color;
    END IF;
    IF sector = 2 THEN
		SELECT
			COUNT(*) INTO totales
		FROM beacons_detection_status
		WHERE
			DATE(status_timestamp) = CURDATE()
		AND
			TIME(status_timestamp) <= CURTIME()
		AND
			Sector_2 = color;
    END IF;
    
    IF sector = 3 THEN
		SELECT
			COUNT(*) INTO totales
		FROM beacons_detection_status
		WHERE
			DATE(status_timestamp) = CURDATE()
		AND
			TIME(status_timestamp) <= CURTIME()
		AND
			Sector_1 = color;
    END IF;
    IF sector = 4 THEN
		SELECT
			COUNT(*) INTO totales
		FROM beacons_detection_status
		WHERE
			DATE(status_timestamp) = CURDATE()
		AND
			TIME(status_timestamp) <= CURTIME()
		AND
			Sector_4 = color;
    END IF;
    
    IF sector = 5 THEN
		SELECT
			COUNT(*) INTO totales
		FROM beacons_detection_status
		WHERE
			DATE(status_timestamp) = CURDATE()
		AND
			TIME(status_timestamp) <= CURTIME()
		AND
			Sector_5 = color;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure process_existing_gps_data
-- -----------------------------------------------------

USE `teltonika`;
DROP procedure IF EXISTS `teltonika`.`process_existing_gps_data`;

DELIMITER $$
USE `teltonika`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `process_existing_gps_data`()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE v_device_id BIGINT;
    DECLARE v_device_name VARCHAR(255);
    DECLARE v_event_enum INT;
    DECLARE v_altitude DECIMAL(10,2);
    DECLARE v_latitude DECIMAL(10,8);
    DECLARE v_longitude DECIMAL(10,8);
    DECLARE v_timestamp BIGINT;
    DECLARE v_ble_beacons TEXT;
    DECLARE v_battery_level INT;
    DECLARE v_ble_sensor_humidity_1 INT;
    DECLARE v_ble_sensor_magnet_status_1 TINYINT;
    DECLARE v_ble_sensor_temperature_1 INT;

    DECLARE cur CURSOR FOR 
        SELECT device_id, device_name, event_enum, altitude, latitude, longitude, 
               timestamp, ble_beacons, battery_level, ble_sensor_humidity_1, 
               ble_sensor_magnet_status_1, ble_sensor_temperature_1
        FROM gps_data;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO v_device_id, v_device_name, v_event_enum, v_altitude, v_latitude, v_longitude, 
                      v_timestamp, v_ble_beacons, v_battery_level, v_ble_sensor_humidity_1, 
                      v_ble_sensor_magnet_status_1, v_ble_sensor_temperature_1;
        
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Procesar ble_beacons
        BLOCK: BEGIN
            DECLARE json_data JSON;
            DECLARE max_rssi INT DEFAULT -1000000;
            DECLARE selected_id VARCHAR(255);
            DECLARE i INT DEFAULT 0;
            DECLARE current_rssi INT;
            DECLARE current_id VARCHAR(255);

            SET json_data = JSON_EXTRACT(v_ble_beacons, '$');

            WHILE i < JSON_LENGTH(json_data) DO
                SET current_rssi = JSON_EXTRACT(json_data, CONCAT('$[', i, '].rssi'));
                SET current_id = JSON_UNQUOTE(JSON_EXTRACT(json_data, CONCAT('$[', i, '].id')));
                
                IF current_rssi > max_rssi THEN
                    SET max_rssi = current_rssi;
                    SET selected_id = current_id;
                END IF;
                
                SET i = i + 1;
            END WHILE;

            -- Insertar en la tabla específica si el device_name coincide
            IF v_device_name = '352592573522828' THEN
                INSERT INTO `teltonika`.`gh_5200_data_352592573522828`
                (
                    `id_dispo`,
                    `device_id_gps_data`,
                    `event_enum`,
                    `altitude`,
                    `latitude`,
                    `longitude`,
                    `timestamp`,
                    `beacon_id`,
                    `rsi_beacon`,
                    `battery_level`,
                    `ble_sensor_humidity`,
                    `ble_sensor_magnet_status`,
                    `ble_sensor_temperature`
                )
                VALUES
                (
                    352592573522828,
                    v_device_id,
                    v_event_enum,
                    v_altitude,
                    v_latitude,
                    v_longitude,
                    v_timestamp,
                    selected_id,
                    max_rssi,
                    v_battery_level,
                    v_ble_sensor_humidity_1,
                    v_ble_sensor_magnet_status_1,
                    v_ble_sensor_temperature_1
                );
            END IF;
                        IF v_device_name = '352592576164230' THEN
                INSERT INTO `teltonika`.`fmb204_data_352592576164230`
                (
                    `id_dispo`,
                    `device_id_gps_data`,
                    `event_enum`,
                    `altitude`,
                    `latitude`,
                    `longitude`,
                    `timestamp`,
                    `beacon_id`,
                    `rsi_beacon`,
                    `battery_level`,
                    `ble_sensor_humidity`,
                    `ble_sensor_magnet_status`,
                    `ble_sensor_temperature`
                )
                VALUES
                (
                    352592576164230,
                    v_device_id,
                    v_event_enum,
                    v_altitude,
                    v_latitude,
                    v_longitude,
                    v_timestamp,
                    selected_id,
                    max_rssi,
                    v_battery_level,
                    v_ble_sensor_humidity_1,
                    v_ble_sensor_magnet_status_1,
                    v_ble_sensor_temperature_1
                );
            END IF;
                        IF v_device_name = '353201350896384' THEN
                INSERT INTO `teltonika`.`magic_box_tmt_210_data_353201350896384`
                (
                    `id_dispo`,
                    `device_id_gps_data`,
                    `event_enum`,
                    `altitude`,
                    `latitude`,
                    `longitude`,
                    `timestamp`,
                    `beacon_id`,
                    `rsi_beacon`,
                    `battery_level`,
                    `ble_sensor_humidity`,
                    `ble_sensor_magnet_status`,
                    `ble_sensor_temperature`
                )
                VALUES
                (
                    353201350896384,
                    v_device_id,
                    v_event_enum,
                    v_altitude,
                    v_latitude,
                    v_longitude,
                    v_timestamp,
                    selected_id,
                    max_rssi,
                    v_battery_level,
                    v_ble_sensor_humidity_1,
                    v_ble_sensor_magnet_status_1,
                    v_ble_sensor_temperature_1
                );
            END IF;
        END BLOCK;
    END LOOP;

    CLOSE cur;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure process_existing_gps_data_batch
-- -----------------------------------------------------

USE `teltonika`;
DROP procedure IF EXISTS `teltonika`.`process_existing_gps_data_batch`;

DELIMITER $$
USE `teltonika`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `process_existing_gps_data_batch`(IN start_offset INT, IN batch_size INT)
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE v_device_id BIGINT;
    DECLARE v_device_name VARCHAR(255);
    DECLARE v_event_enum INT;
    DECLARE v_altitude DECIMAL(10,2);
    DECLARE v_latitude DECIMAL(10,8);
    DECLARE v_longitude DECIMAL(10,8);
    DECLARE v_timestamp BIGINT;
    DECLARE v_ble_beacons TEXT;
    DECLARE v_battery_level INT;
    DECLARE v_ble_sensor_humidity_1 INT;
    DECLARE v_ble_sensor_magnet_status_1 TINYINT;
    DECLARE v_ble_sensor_temperature_1 INT;

    DECLARE cur CURSOR FOR 
        SELECT device_id, device_name, event_enum, altitude, latitude, longitude, 
               timestamp, ble_beacons, battery_level, ble_sensor_humidity_1, 
               ble_sensor_magnet_status_1, ble_sensor_temperature_1
        FROM gps_data where id >start_offset
        LIMIT start_offset, batch_size;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO v_device_id, v_device_name, v_event_enum, v_altitude, v_latitude, v_longitude, 
                      v_timestamp, v_ble_beacons, v_battery_level, v_ble_sensor_humidity_1, 
                      v_ble_sensor_magnet_status_1, v_ble_sensor_temperature_1;
        
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Procesar ble_beacons
        BLOCK: BEGIN
            DECLARE json_data JSON;
            DECLARE max_rssi INT DEFAULT -1000000;
            DECLARE selected_id VARCHAR(255);
            DECLARE i INT DEFAULT 0;
            DECLARE current_rssi INT;
            DECLARE current_id VARCHAR(255);

            SET json_data = JSON_EXTRACT(v_ble_beacons, '$');

            WHILE i < JSON_LENGTH(json_data) DO
                SET current_rssi = JSON_EXTRACT(json_data, CONCAT('$[', i, '].rssi'));
                SET current_id = JSON_UNQUOTE(JSON_EXTRACT(json_data, CONCAT('$[', i, '].id')));
                
                IF current_rssi > max_rssi THEN
                    SET max_rssi = current_rssi;
                    SET selected_id = current_id;
                END IF;
                
                SET i = i + 1;
            END WHILE;

            -- Insertar en la tabla específica si el device_name coincide
            IF v_device_name = '352592573522828' THEN
                INSERT INTO `teltonika`.`gh_5200_data_352592573522828`
                (
                    `id_dispo`,
                    `device_id_gps_data`,
                    `event_enum`,
                    `altitude`,
                    `latitude`,
                    `longitude`,
                    `timestamp`,
                    `beacon_id`,
                    `rsi_beacon`,
                    `battery_level`,
                    `ble_sensor_humidity`,
                    `ble_sensor_magnet_status`,
                    `ble_sensor_temperature`
                )
                VALUES
                (
                    352592573522828,
                    v_device_id,
                    v_event_enum,
                    v_altitude,
                    v_latitude,
                    v_longitude,
                    v_timestamp,
                    selected_id,
                    max_rssi,
                    v_battery_level,
                    v_ble_sensor_humidity_1,
                    v_ble_sensor_magnet_status_1,
                    v_ble_sensor_temperature_1
                );
            END IF;
            IF v_device_name = '352592576164230' THEN
                INSERT INTO `teltonika`.`fmb204_data_352592576164230`
                (
                    `id_dispo`,
                    `device_id_gps_data`,
                    `event_enum`,
                    `altitude`,
                    `latitude`,
                    `longitude`,
                    `timestamp`,
                    `beacon_id`,
                    `rsi_beacon`,
                    `battery_level`,
                    `ble_sensor_humidity`,
                    `ble_sensor_magnet_status`,
                    `ble_sensor_temperature`
                )
                VALUES
                (
                    352592576164230,
                    v_device_id,
                    v_event_enum,
                    v_altitude,
                    v_latitude,
                    v_longitude,
                    v_timestamp,
                    selected_id,
                    max_rssi,
                    v_battery_level,
                    v_ble_sensor_humidity_1,
                    v_ble_sensor_magnet_status_1,
                    v_ble_sensor_temperature_1
                );
            END IF;
            IF v_device_name = '3532013508963848' THEN
                INSERT INTO `teltonika`.`magic_box_tmt_210_data_3532013508963848`
                (
                    `id_dispo`,
                    `device_id_gps_data`,
                    `event_enum`,
                    `altitude`,
                    `latitude`,
                    `longitude`,
                    `timestamp`,
                    `beacon_id`,
                    `rsi_beacon`,
                    `battery_level`,
                    `ble_sensor_humidity`,
                    `ble_sensor_magnet_status`,
                    `ble_sensor_temperature`
                )
                VALUES
                (
                    3532013508963848,
                    v_device_id,
                    v_event_enum,
                    v_altitude,
                    v_latitude,
                    v_longitude,
                    v_timestamp,
                    selected_id,
                    max_rssi,
                    v_battery_level,
                    v_ble_sensor_humidity_1,
                    v_ble_sensor_magnet_status_1,
                    v_ble_sensor_temperature_1
                );
            END IF;
        END BLOCK;
    END LOOP;

    CLOSE cur;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure process_sector
-- -----------------------------------------------------

USE `teltonika`;
DROP procedure IF EXISTS `teltonika`.`process_sector`;

DELIMITER $$
USE `teltonika`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `process_sector`(
    IN sector_num INT, 
    IN min_rojo INT, 
    IN max_rojo INT, 
    IN min_amarillo INT, 
    IN max_amarillo INT,
    OUT sector_status VARCHAR(45)
)
BEGIN
    DECLARE minutos_diferencia INT;
    DECLARE inicio int;
    DECLARE fin INT;
    SELECT 
        MIN(gps_data.timestamp), MAX(gps_data.timestamp)
    INTO 
        inicio,fin
    FROM 
        gps_data
    JOIN 
        beacons ON (
            gps_data.ble_beacons LIKE CONCAT('%', beacons.id, '%')
            OR gps_data.ble_beacons LIKE CONCAT('%', beacons.mac, '%')
        )
    WHERE 
        beacons.lugar = CONCAT('Sector ', sector_num)
        AND gps_data.ident IN (SELECT id_dispositivo_asignado FROM personal)
        AND gps_data.timestamp  > ((SELECT timestamp FROM gps_data ORDER BY id DESC LIMIT 1) - 1800);
    
    
	CALL calcular_diferencia_minutos(inicio, fin, minutos_diferencia);
    INSERT INTO `teltonika`.`debug_beacon_count` (`sector`,`count`,`timestamp`)
    VALUES(CONCAT('Sector ', sector_num), minutos_diferencia, CURRENT_TIMESTAMP());
    
    
	IF minutos_diferencia IS NULL OR minutos_diferencia <= min_rojo THEN
		SET sector_status = 'Negro';
	ELSEIF minutos_diferencia > min_rojo AND minutos_diferencia <= max_rojo THEN
		SET sector_status = 'Rojo';
	ELSEIF minutos_diferencia > min_amarillo AND minutos_diferencia <= max_amarillo THEN
		SET sector_status = 'Amarillo';
	ELSE
		SET sector_status = 'Verde';
	END IF;
    
END$$

DELIMITER ;
USE `teltonika`;

DELIMITER $$

USE `teltonika`$$
DROP TRIGGER IF EXISTS `teltonika`.`triggerGPSDATAaDoorStatus` $$
USE `teltonika`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `teltonika`.`triggerGPSDATAaDoorStatus`
AFTER INSERT ON `teltonika`.`gps_data`
FOR EACH ROW
BEGIN
    DECLARE mac_address VARCHAR(45);
    DECLARE es_puerta TINYINT;
    DECLARE temperatura FLOAT;
    DECLARE status_magnetico TINYINT;
    DECLARE raw_data TEXT;
    DECLARE nombre_sector VARCHAR(45);
    DECLARE tiempo BIGINT;
    DECLARE tiempo_formateado DATETIME;
    
    
    IF NEW.event_enum = 11317 THEN
        SET raw_data = NEW.ble_beacons;
        SET tiempo = NEW.timestamp;
        CALL ObtenerValorString(raw_data, 'mac.address', mac_address);
        SELECT esPuerta INTO es_puerta FROM beacons WHERE mac = mac_address;
        IF es_puerta = 1 THEN
            CALL ObtenerValorString(raw_data, 'temperature', temperatura);
            CALL ObtenerValorString(raw_data, 'magnet', status_magnetico);
            SELECT ubicacion INTO nombre_sector FROM beacons WHERE mac = mac_address;
            SET tiempo_formateado = FROM_UNIXTIME(tiempo);
            INSERT INTO door_status (sector, magnet_status, temperature, timestamp)
            VALUES (nombre_sector, status_magnetico, temperatura, tiempo_formateado);
        END IF;
    END IF;
END$$


USE `teltonika`$$
DROP TRIGGER IF EXISTS `teltonika`.`trigger_nuevo_dato_GPS_data_table` $$
USE `teltonika`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `teltonika`.`trigger_nuevo_dato_GPS_data_table`
AFTER INSERT ON `teltonika`.`gps_data`
FOR EACH ROW
BEGIN
    -- Variables utilizadas en el trigger
    -- Variables a ser utilizadas en el caso 11317
    DECLARE EYE_battery_low TINYINT DEFAULT NULL;
    DECLARE EYE_humidity INT DEFAULT NULL;
    DECLARE EYE_id VARCHAR(50) DEFAULT NULL;
    DECLARE EYE_mac_address VARCHAR(50) DEFAULT NULL;
    DECLARE EYE_magnet TINYINT DEFAULT NULL;
    DECLARE EYE_magnet_count INT DEFAULT NULL;
    DECLARE EYE_movement TINYINT DEFAULT NULL;
    DECLARE EYE_movement_count INT DEFAULT NULL;
    DECLARE EYE_temperature DECIMAL(5,2) DEFAULT NULL;
    DECLARE EYE_type VARCHAR(45) DEFAULT NULL;
    DECLARE temp_beacon_id VARCHAR(50) DEFAULT NULL;
    
    -- Variables para extraer datos del caso 385
    DECLARE KTK_ID VARCHAR(50) DEFAULT NULL;
    DECLARE KTK_battery_voltage INT DEFAULT NULL;
    DECLARE KTK_RSSI INT DEFAULT NULL;
    DECLARE KTK_TEMPERATURE FLOAT DEFAULT NULL;
    
    -- Variables para loop
    DECLARE counter INT DEFAULT 0;
    DECLARE array_length INT DEFAULT 0;
    DECLARE highest_rssi INT DEFAULT -999999;
    DECLARE json_element JSON DEFAULT NULL;
    DECLARE json_data JSON DEFAULT NULL;
    DECLARE highest_rssi_element JSON DEFAULT NULL;
    -- TEXTO DE ble_beacon
    DECLARE texto_original_ble_beacon VARCHAR(10000);
    

    -- Convertir la cadena a JSON
    SET json_data = NEW.ble_beacons;
    

    -- Log the initial JSON data
    INSERT INTO process_log(message, timestamp) 
    VALUES (CONCAT('json_data: ', json_data), CURRENT_TIMESTAMP);

    -- INICIO CASO EVENT.ENUM = 385
    IF NEW.event_enum = 385 THEN
        SET array_length = JSON_LENGTH(json_data);
        WHILE counter < array_length DO
            -- Extraer el elemento JSON en el índice actual
            SET json_element = JSON_EXTRACT(json_data, CONCAT('$[', counter, ']'));
            
            -- Extraer el valor RSSI del elemento JSON actual
            SET @rssi = CAST(JSON_UNQUOTE(JSON_EXTRACT(json_element, '$.rssi')) AS SIGNED);
            
            -- Verificar si este valor RSSI es mayor que el actual más alto
            IF @rssi > highest_rssi THEN
                SET highest_rssi = @rssi;
                SET highest_rssi_element = json_element;
            END IF;
            SET counter = counter + 1;
        END WHILE;

        -- Obtener los datos del elemento con el rssi más alto
        SET KTK_ID = JSON_UNQUOTE(JSON_EXTRACT(highest_rssi_element, '$.id'));
        SET KTK_battery_voltage = JSON_UNQUOTE(JSON_EXTRACT(highest_rssi_element, '$.battery.voltage'));
        SET KTK_RSSI = JSON_UNQUOTE(JSON_EXTRACT(highest_rssi_element, '$.rssi'));
        SET KTK_TEMPERATURE = JSON_UNQUOTE(JSON_EXTRACT(highest_rssi_element, '$.temperature'));
        
        -- Insertar datos en la tabla adecuada según el device ident
        IF NEW.ident = '352592573522828' THEN
            INSERT INTO `teltonika`.`gh_5200_data_352592573522828`
                (`id_dispo`, `device_id_gps_data`, `event_enum`, `altitude`, `latitude`, `longitude`,
                 `timestamp`, `beacon_id`, `rsi_beacon`, `battery_level`, `ble_sensor_humidity`,
                 `ble_sensor_magnet_status`, `ble_sensor_temperature`, `ID_GPS_DATA`)
            VALUES
                ('352592573522828', NEW.device_id, NEW.event_enum, NEW.altitude, NEW.latitude, NEW.longitude,
                 NEW.timestamp, KTK_ID, KTK_RSSI, NEW.battery_level, NEW.ble_sensor_humidity_1,
                 NEW.ble_sensor_magnet_status_1, KTK_TEMPERATURE, NEW.id);
        END IF;

        IF NEW.ident = '353201350896384' THEN
            INSERT INTO `teltonika`.`magic_box_tmt_210_data_353201350896384`
                (`id_dispo`, `device_id_gps_data`, `event_enum`, `altitude`, `latitude`, `longitude`,
                 `timestamp`, `beacon_id`, `rsi_beacon`, `battery_level`, `ble_sensor_humidity`,
                 `ble_sensor_magnet_status`, `ble_sensor_temperature`, `ID_GPS_DATA`)
            VALUES
                ('353201350896384', NEW.device_id, NEW.event_enum, NEW.altitude, NEW.latitude, NEW.longitude,
                 NEW.timestamp, KTK_ID, KTK_RSSI, NEW.battery_level, NEW.ble_sensor_humidity_1,
                 NEW.ble_sensor_magnet_status_1, KTK_TEMPERATURE, NEW.id);
        END IF;

        IF NEW.ident = '352592576164230' THEN
            INSERT INTO `teltonika`.`fmb204_data_352592576164230`
                (`id_dispo`, `device_id_gps_data`, `event_enum`, `altitude`, `latitude`, `longitude`,
                 `timestamp`, `beacon_id`, `rsi_beacon`, `battery_level`, `ble_sensor_humidity`,
                 `ble_sensor_magnet_status`, `ble_sensor_temperature`, `ID_GPS_DATA`)
            VALUES
                ('352592576164230', NEW.device_id, NEW.event_enum, NEW.altitude, NEW.latitude, NEW.longitude,
                 NEW.timestamp, KTK_ID, KTK_RSSI, NEW.battery_level, NEW.ble_sensor_humidity_1,
                 NEW.ble_sensor_magnet_status_1, KTK_TEMPERATURE, NEW.id);
        END IF;
    END IF;

    -- INICIO CASO EVENT.ENUM = 11317
    IF NEW.event_enum = 11317 THEN
		SET texto_original_ble_beacon = NEW.ble_beacons;
        SET json_element = JSON_EXTRACT(json_data, '$[0]');
        
        CALL ObtenerValorString(texto_original_ble_beacon, 'mac.address', EYE_mac_address);

        -- Log EYE_mac_address
        INSERT INTO process_log(message, timestamp) 
        VALUES (CONCAT('EYE_mac_address: ', IFNULL(EYE_mac_address, 'NULL')), CURRENT_TIMESTAMP);
        
        IF EYE_mac_address IS NOT NULL AND EYE_mac_address <> '' THEN
            SELECT id INTO temp_beacon_id FROM beacons WHERE mac = EYE_mac_address;
        ELSE
            SET temp_beacon_id = CONCAT('no encontrado: ', IFNULL(EYE_mac_address, 'NULL'));
        END IF;

        -- Log temp_beacon_id
        INSERT INTO process_log(message, timestamp) 
        VALUES (CONCAT('temp_beacon_id: ', IFNULL(temp_beacon_id, 'NULL')), CURRENT_TIMESTAMP);
        
        CALL ObtenerValorString(texto_original_ble_beacon, 'battery.low', EYE_battery_low);
        CALL ObtenerValorString(texto_original_ble_beacon, 'humidity', EYE_humidity);
        CALL ObtenerValorString(texto_original_ble_beacon, 'id', EYE_id);
        CALL ObtenerValorString(texto_original_ble_beacon, 'magnet', EYE_magnet);
        CALL ObtenerValorString(texto_original_ble_beacon, 'magnet.count', EYE_magnet_count);
		CALL ObtenerValorString(texto_original_ble_beacon, 'movement', EYE_movement);
        CALL ObtenerValorString(texto_original_ble_beacon, 'movement.count', EYE_movement_count);
        CALL ObtenerValorString(texto_original_ble_beacon, 'temperature', EYE_temperature);
        CALL ObtenerValorString(texto_original_ble_beacon, 'type', EYE_type);
        
        
        -- Log all extracted values
        INSERT INTO process_log(message, timestamp) 
        VALUES (
            CONCAT(
                'EYE_mac_address: ', IFNULL(EYE_mac_address, 'NULL'), ', ',
                'EYE_battery_low: ', IFNULL(EYE_battery_low, 'NULL'), ', ',
                'EYE_humidity: ', IFNULL(EYE_humidity, 'NULL'), ', ',
                'EYE_id: ', IFNULL(EYE_id, 'NULL'), ', ',
                'EYE_magnet: ', IFNULL(EYE_magnet, 'NULL'), ', ',
                'EYE_magnet_count: ', IFNULL(EYE_magnet_count, 'NULL'), ', ',
                'EYE_movement: ', IFNULL(EYE_movement, 'NULL'), ', ',
                'EYE_movement_count: ', IFNULL(EYE_movement_count, 'NULL'), ', ',
                'EYE_temperature: ', IFNULL(EYE_temperature, 'NULL'), ', ',
                'EYE_type: ', IFNULL(EYE_type, 'NULL')
            ), 
            CURRENT_TIMESTAMP
        );

        -- Insertar datos en la tabla adecuada según el device ident
        IF NEW.ident = '352592573522828' THEN
            INSERT INTO `teltonika`.`gh_5200_data_352592573522828`
                (`id_dispo`, `device_id_gps_data`, `event_enum`, `altitude`, `latitude`, `longitude`,
                 `timestamp`, `beacon_id`, `battery_level`, `ble_sensor_humidity`,
                 `ble_sensor_magnet_status`, `ble_sensor_temperature`, `EYE_battery.low`, `EYE_humidity`,
                 `EYE_id`, `EYE_mac.address`, `EYE_magnet`, `EYE_magnet.count`, `EYE_movement`,
                 `EYE_movement.count`, `EYE_temperature`, `EYE_type`, `ID_GPS_DATA`)
            VALUES
                ('352592573522828', NEW.device_id, NEW.event_enum, NEW.altitude, NEW.latitude, NEW.longitude,
                 NEW.timestamp, temp_beacon_id, NEW.battery_level, NEW.ble_sensor_humidity_1,
                 NEW.ble_sensor_magnet_status_1, NEW.ble_sensor_temperature_1, EYE_battery_low, EYE_humidity,
                 EYE_id, EYE_mac_address, EYE_magnet, EYE_magnet_count, EYE_movement, EYE_movement_count,
                 EYE_temperature, EYE_type, NEW.id);
        END IF;

        IF NEW.ident = '353201350896384' THEN
            INSERT INTO `teltonika`.`magic_box_tmt_210_data_353201350896384`
                (`id_dispo`, `device_id_gps_data`, `event_enum`, `altitude`, `latitude`, `longitude`,
                 `timestamp`, `beacon_id`, `battery_level`, `ble_sensor_humidity`,
                 `ble_sensor_magnet_status`, `ble_sensor_temperature`, `EYE_battery.low`, `EYE_humidity`,
                 `EYE_id`, `EYE_mac.address`, `EYE_magnet`, `EYE_magnet.count`, `EYE_movement`,
                 `EYE_movement.count`, `EYE_temperature`, `EYE_type`, `ID_GPS_DATA`)
            VALUES
                ('353201350896384', NEW.device_id, NEW.event_enum, NEW.altitude, NEW.latitude, NEW.longitude,
                 NEW.timestamp, temp_beacon_id, NEW.battery_level, NEW.ble_sensor_humidity_1,
                 NEW.ble_sensor_magnet_status_1, NEW.ble_sensor_temperature_1, EYE_battery_low, EYE_humidity,
                 EYE_id, EYE_mac_address, EYE_magnet, EYE_magnet_count, EYE_movement, EYE_movement_count,
                 EYE_temperature, EYE_type, NEW.id);
        END IF;

        IF NEW.ident = '352592576164230' THEN
            INSERT INTO `teltonika`.`fmb204_data_352592576164230`
                (`id_dispo`, `device_id_gps_data`, `event_enum`, `altitude`, `latitude`, `longitude`,
                 `timestamp`, `beacon_id`, `battery_level`, `ble_sensor_humidity`,
                 `ble_sensor_magnet_status`, `ble_sensor_temperature`, `EYE_battery.low`, `EYE_humidity`,
                 `EYE_id`, `EYE_mac.address`, `EYE_magnet`, `EYE_magnet.count`, `EYE_movement`,
                 `EYE_movement.count`, `EYE_temperature`, `EYE_type`, `ID_GPS_DATA`)
            VALUES
                ('352592576164230', NEW.device_id, NEW.event_enum, NEW.altitude, NEW.latitude, NEW.longitude,
                 NEW.timestamp, temp_beacon_id, NEW.battery_level, NEW.ble_sensor_humidity_1,
                 NEW.ble_sensor_magnet_status_1, NEW.ble_sensor_temperature_1, EYE_battery_low, EYE_humidity,
                 EYE_id, EYE_mac_address, EYE_magnet, EYE_magnet_count, EYE_movement, EYE_movement_count,
                 EYE_temperature, EYE_type, NEW.id);
        END IF;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
