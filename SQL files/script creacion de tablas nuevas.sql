-- MySQL Script generated by MySQL Workbench
-- Thu Sep  5 18:40:59 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema teltonica_dev
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `teltonica_dev` ;

-- -----------------------------------------------------
-- Schema teltonica_dev
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `teltonica_dev` DEFAULT CHARACTER SET utf8 ;
USE `teltonica_dev` ;

-- -----------------------------------------------------
-- Table `teltonica_dev`.`devices`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`devices` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`devices` (
  `id_devices` BIGINT NOT NULL AUTO_INCREMENT,
  `device_asignado` VARCHAR(30) NOT NULL,
  `telefono` VARCHAR(45) NULL DEFAULT NULL,
  `esBlindSpot` TINYINT NULL DEFAULT 0,
  PRIMARY KEY (`id_devices`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`gps_data`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`gps_data` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`gps_data` (
  `id_gps_data` INT NOT NULL AUTO_INCREMENT,
  `device_id` BIGINT NULL,
  `device_name` INT NULL DEFAULT NULL,
  `device_type_id` INT NULL DEFAULT NULL,
  `event_enum` INT NULL DEFAULT NULL,
  `event_priority_enum` INT NULL DEFAULT NULL,
  `ident` INT NULL DEFAULT NULL,
  `peer` VARCHAR(20) NULL DEFAULT NULL,
  `altitude` DECIMAL(10,2) NULL DEFAULT NULL,
  `direction` DECIMAL(10,2) NULL DEFAULT NULL,
  `latitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `longitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `satellites` INT NULL DEFAULT 0,
  `speed` DECIMAL(10,2) NULL DEFAULT NULL,
  `protocol_id` INT NULL DEFAULT NULL,
  `server_timestamp` TIMESTAMP NULL DEFAULT NULL,
  `timestamp` TIMESTAMP NULL DEFAULT NULL,
  `ble_beacon` JSON NOT NULL,
  `channel_id` INT NULL DEFAULT NULL,
  `codec_id` INT NULL DEFAULT NULL,
  `battery_level` INT NULL DEFAULT NULL,
  `battery_voltage` DECIMAL(10,3) NULL DEFAULT NULL,
  `battery_current` DECIMAL(10,3) NULL DEFAULT NULL,
  `ble_sensor_humidity_1` INT NULL DEFAULT NULL,
  `ble_sensor_humidity_2` INT NULL DEFAULT NULL,
  `ble_sensor_humidity_3` INT NULL DEFAULT NULL,
  `ble_sensor_humidity_4` INT NULL DEFAULT NULL,
  `ble_sensor_low_battery_status_1` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_low_battery_status_2` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_magnet_status_1` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_magnet_status_2` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_magnet_count_1` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_magnet_count_2` TINYINT(1) NULL DEFAULT NULL,
  `ble_sensor_temperature_1` DECIMAL(5,2) NULL DEFAULT NULL,
  `ble_sensor_temperature_2` DECIMAL(5,2) NULL DEFAULT NULL,
  `ble_sensor_temperature_3` DECIMAL(5,2) NULL DEFAULT NULL,
  `ble_sensor_temperature_4` DECIMAL(5,2) NULL DEFAULT NULL,
  `bluetooth_state_enum` INT NULL DEFAULT NULL,
  `gnss_state_enum` INT NULL DEFAULT NULL,
  `gnss_status` TINYINT(1) NULL DEFAULT NULL,
  `gnss_sleep_mode_status` TINYINT(1) NULL DEFAULT NULL,
  `gsm_mcc` INT NULL DEFAULT NULL,
  `gsm_mnc` INT NULL DEFAULT NULL,
  `gsm_operator_code` VARCHAR(10) NULL DEFAULT NULL,
  `gsm_signal_level` INT NULL DEFAULT NULL,
  `movement_status` TINYINT(1) NULL DEFAULT NULL,
  `position_hdop` DECIMAL(5,1) NULL DEFAULT NULL,
  `gps_datacol` DECIMAL(5,1) NULL DEFAULT NULL,
  `position_valid` TINYINT(1) NULL DEFAULT NULL,
  `position_fix_age` INT NULL DEFAULT NULL,
  `sleep_mode_enum` INT NULL DEFAULT NULL,
  `custom_param_116` INT NULL DEFAULT NULL,
  `engine_ignition_status` TINYINT(1) NULL DEFAULT NULL,
  `external_powersource_voltage` DECIMAL(10,3) NULL DEFAULT NULL,
  `vehicle_mileage` DECIMAL(10,3) NULL DEFAULT NULL,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_gps_data`),
  INDEX `gps_data-devices-id_idx` (`device_id` ASC) VISIBLE,
  CONSTRAINT `gps_data-devices-id`
    FOREIGN KEY (`device_id`)
    REFERENCES `teltonica_dev`.`devices` (`id_devices`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`personal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`personal` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`personal` (
  `id_personal` INT NOT NULL AUTO_INCREMENT,
  `Nombre_Personal` VARCHAR(45) NOT NULL,
  `id_dispositivo_asignado` BIGINT NOT NULL,
  `imagen_asignado` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id_personal`),
  INDEX `personal_devices_id_idx` (`id_dispositivo_asignado` ASC) VISIBLE,
  CONSTRAINT `personal_devices_id`
    FOREIGN KEY (`id_dispositivo_asignado`)
    REFERENCES `teltonica_dev`.`devices` (`id_devices`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`channels_ubibot`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`channels_ubibot` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`channels_ubibot` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `channel_id` INT NOT NULL,
  `name` VARCHAR(50) NOT NULL,
  `product_id` VARCHAR(20) NULL DEFAULT NULL,
  `device_id` VARCHAR(64) NULL DEFAULT NULL,
  `latitude` DECIMAL(11,8) NULL DEFAULT NULL,
  `longitude` DECIMAL(11,8) NULL DEFAULT NULL,
  `firmware` VARCHAR(20) NULL DEFAULT NULL,
  `mac_address` VARCHAR(17) NULL DEFAULT NULL,
  `created_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP(),
  `last_entry_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`id`, `channel_id`),
  INDEX `idx_channel_id` (`channel_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`beacons`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`beacons` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`beacons` (
  `id_beacons` VARCHAR(50) NOT NULL,
  `sector` VARCHAR(255) NOT NULL,
  `mac` VARCHAR(45) NOT NULL,
  `esPuerta` TINYINT NULL DEFAULT 0,
  `esTemperatura` TINYINT NULL DEFAULT 0,
  `esBlindSpot` TINYINT NULL DEFAULT 0,
  PRIMARY KEY (`id_beacons`),
  UNIQUE INDEX `sector_UNIQUE` (`sector` ASC) VISIBLE,
  UNIQUE INDEX `mac_UNIQUE` (`mac` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`ultima_llamada_blindspot`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`ultima_llamada_blindspot` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`ultima_llamada_blindspot` (
  `id_dispositivo` BIGINT NOT NULL,
  `beacon_id` VARCHAR(50) NOT NULL,
  `ultima_llamada` DATETIME NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`id_dispositivo`, `beacon_id`),
  INDEX `ultima_llamada-beacon_idx` (`beacon_id` ASC) VISIBLE,
  CONSTRAINT `ultima_llamada-dispositivo`
    FOREIGN KEY (`id_dispositivo`)
    REFERENCES `teltonica_dev`.`devices` (`id_devices`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `ultima_llamada-beacon`
    FOREIGN KEY (`beacon_id`)
    REFERENCES `teltonica_dev`.`beacons` (`id_beacons`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`incidencias_blindspot`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`incidencias_blindspot` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`incidencias_blindspot` (
  `id_incidencia` INT NOT NULL AUTO_INCREMENT,
  `id_dispositivo` BIGINT NOT NULL,
  `id_beacon` VARCHAR(50) NOT NULL,
  `hora_entrada` TIMESTAMP NULL DEFAULT NULL,
  `hora_salida` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`id_incidencia`),
  INDEX `incidencia-device_idx` (`id_dispositivo` ASC) VISIBLE,
  INDEX `incidencia-beacon_idx` (`id_beacon` ASC) VISIBLE,
  CONSTRAINT `incidencia-device`
    FOREIGN KEY (`id_dispositivo`)
    REFERENCES `teltonica_dev`.`devices` (`id_devices`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `incidencia-beacon`
    FOREIGN KEY (`id_beacon`)
    REFERENCES `teltonica_dev`.`beacons` (`id_beacons`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`tipo_configuracion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`tipo_configuracion` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`tipo_configuracion` (
  `idtipo_confiracion` INT NOT NULL AUTO_INCREMENT,
  `nombre_configuracion` VARCHAR(45) NOT NULL COMMENT 'Si es de permancencia o temperatura.\\nA futuro se puede definir m√°s',
  PRIMARY KEY (`idtipo_confiracion`),
  UNIQUE INDEX `tipo_confiracioncol_UNIQUE` (`nombre_configuracion` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`configuraciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`configuraciones` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`configuraciones` (
  `id_configuracion` INT NOT NULL AUTO_INCREMENT,
  `nombre_configuracion` VARCHAR(45) NOT NULL,
  `tipo_config` INT NOT NULL,
  `valor_numerico` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_configuracion`),
  INDEX `configuracion-tipo_configuracion_idx` (`tipo_config` ASC) VISIBLE,
  CONSTRAINT `configuracion-tipo_configuracion`
    FOREIGN KEY (`tipo_config`)
    REFERENCES `teltonica_dev`.`tipo_configuracion` (`idtipo_confiracion`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`historicio_llamadas_blindspot`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`historicio_llamadas_blindspot` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`historicio_llamadas_blindspot` (
  `id_historicio_llamadas_blindspot` INT NOT NULL AUTO_INCREMENT,
  `dispositivo` BIGINT NOT NULL,
  `beacon_id` VARCHAR(50) NOT NULL,
  `timestamp_llamada` DATETIME NULL DEFAULT NULL,
  `estado_llamada` ENUM('iniciada', 'completada', 'fallida') NULL DEFAULT NULL,
  `duracion_segundos` INT NULL DEFAULT NULL,
  `sid` VARCHAR(100) NULL DEFAULT NULL,
  `detalles` TEXT NULL DEFAULT NULL,
  `ruta_video` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`id_historicio_llamadas_blindspot`),
  INDEX `historico_llamadas_blindspot-dispositivo-id_dispositivo_idx` (`dispositivo` ASC) VISIBLE,
  INDEX `historico_llamadas_blindspot-beacon-id_beacon_idx` (`beacon_id` ASC) VISIBLE,
  CONSTRAINT `historico_llamadas_blindspot-dispositivo-id_dispositivo`
    FOREIGN KEY (`dispositivo`)
    REFERENCES `teltonica_dev`.`devices` (`id_devices`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `historico_llamadas_blindspot-beacon-id_beacon`
    FOREIGN KEY (`beacon_id`)
    REFERENCES `teltonica_dev`.`beacons` (`id_beacons`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`usuarios` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`usuarios` (
  `id_usuarios` INT NOT NULL,
  `username` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `resetToken` VARCHAR(2525) NULL DEFAULT NULL,
  `resetTokenExpiry` BIGINT NULL DEFAULT NULL,
  PRIMARY KEY (`id_usuarios`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`tipoPermisos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`tipoPermisos` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`tipoPermisos` (
  `id_tipoPermisos` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_tipoPermisos`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`permisos_usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`permisos_usuarios` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`permisos_usuarios` (
  `id_usuario` INT NOT NULL,
  `id_permiso` INT NOT NULL,
  `fecha_otorgado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`id_usuario`, `id_permiso`),
  INDEX `usuario-permiso-id_permiso_idx` (`id_permiso` ASC) VISIBLE,
  CONSTRAINT `usuario-permiso-id_usuario`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `teltonica_dev`.`usuarios` (`id_usuarios`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `usuario-permiso-id_permiso`
    FOREIGN KEY (`id_permiso`)
    REFERENCES `teltonica_dev`.`tipoPermisos` (`id_tipoPermisos`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`log_acciones_usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`log_acciones_usuario` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`log_acciones_usuario` (
  `id_log_acciones_usuario` INT NOT NULL,
  `id_usuario` INT NOT NULL,
  `accion_realizada` TEXT NOT NULL,
  PRIMARY KEY (`id_log_acciones_usuario`),
  INDEX `log-usuario-id_usuario_idx` (`id_usuario` ASC) VISIBLE,
  CONSTRAINT `log-usuario-id_usuario`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `teltonica_dev`.`usuarios` (`id_usuarios`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`EYE_KTK_CommonData`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`EYE_KTK_CommonData` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`EYE_KTK_CommonData` (
  `id_EYE_KTK_CommonData` INT NOT NULL,
  `id_dispositivo` BIGINT NOT NULL,
  `id_gps_data` INT NOT NULL,
  `event_enum` INT NULL DEFAULT NULL,
  `altitude` DECIMAL(10,2) NULL DEFAULT NULL,
  `latitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `longitude` DECIMAL(10,8) NULL DEFAULT NULL,
  `commonDataTimestamp` TIMESTAMP NULL DEFAULT NULL,
  `beacon_id` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`id_EYE_KTK_CommonData`),
  INDEX `commonData-device-id_dispositivo_idx` (`id_dispositivo` ASC) VISIBLE,
  INDEX `commonData-gps_data-id_gps_data_idx` (`id_gps_data` ASC) VISIBLE,
  INDEX `commonData-beacon-beacon_ID_idx` (`beacon_id` ASC) VISIBLE,
  CONSTRAINT `commonData-device-id_dispositivo`
    FOREIGN KEY (`id_dispositivo`)
    REFERENCES `teltonica_dev`.`devices` (`id_devices`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `commonData-gps_data-id_gps_data`
    FOREIGN KEY (`id_gps_data`)
    REFERENCES `teltonica_dev`.`gps_data` (`id_gps_data`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `commonData-beacon-beacon_ID`
    FOREIGN KEY (`beacon_id`)
    REFERENCES `teltonica_dev`.`beacons` (`id_beacons`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`KTK_Specific_Data`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`KTK_Specific_Data` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`KTK_Specific_Data` (
  `idKTK_Specific_Data` INT NOT NULL,
  `rssi_beacon` INT NULL DEFAULT NULL,
  `battery_level` INT NULL DEFAULT NULL,
  `ble_sensor_humidity` INT NULL DEFAULT NULL,
  `ble_sensor_magnet_status` TINYINT NULL DEFAULT NULL,
  `ble_sensor_temperature` INT NULL DEFAULT NULL,
  PRIMARY KEY (`idKTK_Specific_Data`),
  CONSTRAINT `ktk_specific-commondata`
    FOREIGN KEY (`idKTK_Specific_Data`)
    REFERENCES `teltonica_dev`.`EYE_KTK_CommonData` (`id_EYE_KTK_CommonData`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`EYE_Specific_Data`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`EYE_Specific_Data` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`EYE_Specific_Data` (
  `id_EYE_Specific_Data` INT NOT NULL,
  `battery.low` TINYINT NULL DEFAULT NULL,
  `humidity` INT NULL DEFAULT NULL,
  `EYE_id` VARCHAR(45) NULL DEFAULT NULL,
  `mac_address` VARCHAR(45) NULL DEFAULT NULL,
  `magnet` TINYINT NULL DEFAULT NULL,
  `magnent_count` INT NULL DEFAULT NULL,
  `movement` TINYINT NULL DEFAULT NULL,
  `movemnt_count` INT NULL DEFAULT NULL,
  `temperature` DECIMAL(5,2) NULL DEFAULT NULL,
  `type` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id_EYE_Specific_Data`),
  INDEX `EYE-beacon-mac_idx` (`mac_address` ASC) VISIBLE,
  CONSTRAINT `EYE-commondata-id`
    FOREIGN KEY (`id_EYE_Specific_Data`)
    REFERENCES `teltonica_dev`.`EYE_KTK_CommonData` (`id_EYE_KTK_CommonData`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `EYE-beacon-mac`
    FOREIGN KEY (`mac_address`)
    REFERENCES `teltonica_dev`.`beacons` (`mac`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`registro_temperatura`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`registro_temperatura` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`registro_temperatura` (
  `id_registro_temperatura` INT NOT NULL,
  `beacon_id` VARCHAR(50) NULL DEFAULT NULL,
  `timestamp` TIMESTAMP NULL DEFAULT NULL,
  `temperatura` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`id_registro_temperatura`),
  INDEX `beacon_temperatura-id_idx` (`beacon_id` ASC) VISIBLE,
  CONSTRAINT `beacon_temperatura-id`
    FOREIGN KEY (`beacon_id`)
    REFERENCES `teltonica_dev`.`beacons` (`id_beacons`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `teltonica_dev`.`beacons_detection_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `teltonica_dev`.`beacons_detection_status` ;

CREATE TABLE IF NOT EXISTS `teltonica_dev`.`beacons_detection_status` (
  `idbeacons_detection_status` INT NOT NULL AUTO_INCREMENT,
  `status_timestamp` TIMESTAMP NULL,
  `Sector_1` INT NULL,
  `Sector_2` INT NULL,
  `Sector_3` INT NULL,
  `Sector_4` INT NULL,
  `Sector_5` INT NULL,
  PRIMARY KEY (`idbeacons_detection_status`))
ENGINE = InnoDB;

USE `teltonica_dev` ;

-- -----------------------------------------------------
-- procedure ObtenerValorString
-- -----------------------------------------------------

USE `teltonica_dev`;
DROP procedure IF EXISTS `teltonica_dev`.`ObtenerValorString`;

DELIMITER $$
USE `teltonica_dev`$$
CREATE PROCEDURE `ObtenerValorString`(
    IN p_input_string TEXT,
    IN p_key VARCHAR(50),
    OUT p_value VARCHAR(255)
)
BEGIN
DECLARE v_start INT;
    DECLARE v_end INT;
    DECLARE v_search VARCHAR(55);
    
    -- Preparar la cadena de b√∫squeda
    SET v_search = CONCAT('"', p_key, '":');
    
    -- Encontrar la posici√≥n inicial del valor
    SET v_start = LOCATE(v_search, p_input_string);
    
    IF v_start > 0 THEN
        -- Ajustar la posici√≥n inicial al comienzo del valor
        SET v_start = v_start + LENGTH(v_search);
        
        -- Encontrar el final del valor
        SET v_end = LOCATE(',', p_input_string, v_start);
        
        -- Si no hay coma, buscar el final del objeto
        IF v_end = 0 THEN
            SET v_end = LOCATE('}', p_input_string, v_start);
        END IF;
        
        -- Extraer el valor
        IF v_end > v_start THEN
            SET p_value = SUBSTRING(p_input_string, v_start, v_end - v_start);
        ELSE
            SET p_value = SUBSTRING(p_input_string, v_start);
        END IF;
        
        -- Limpiar el valor de comillas si es necesario
        SET p_value = TRIM(BOTH '"' FROM p_value);
        
        -- Manejar valores booleanos
        IF p_value = 'true' THEN
            SET p_value = '1';
        ELSEIF p_value = 'false' THEN
            SET p_value = '0';
        END IF;
    ELSE
        SET p_value = NULL;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure process_sector
-- -----------------------------------------------------

USE `teltonica_dev`;
DROP procedure IF EXISTS `teltonica_dev`.`process_sector`;

DELIMITER $$
USE `teltonica_dev`$$
CREATE PROCEDURE `process_sector`(
    IN sector_num INT, 
    IN min_rojo INT, 
    IN max_rojo INT, 
    IN min_amarillo INT, 
    IN max_amarillo INT,
    OUT sector_status VARCHAR(45)
)
BEGIN
    DECLARE minutos_diferencia INT;
    DECLARE inicio int;
    DECLARE fin INT;
    SELECT 
        MIN(gps_data.timestamp), MAX(gps_data.timestamp)
    INTO 
        inicio,fin
    FROM 
        gps_data
    JOIN 
        beacons ON (
            gps_data.ble_beacons LIKE CONCAT('%', beacons.id, '%')
            OR gps_data.ble_beacons LIKE CONCAT('%', beacons.mac, '%')
        )
    WHERE 
        beacons.lugar = CONCAT('Sector ', sector_num)
        AND gps_data.ident IN (SELECT id_dispositivo_asignado FROM personal)
        AND gps_data.timestamp  > ((SELECT timestamp FROM gps_data ORDER BY id DESC LIMIT 1) - 1800);
    
    
	CALL calcular_diferencia_minutos(inicio, fin, minutos_diferencia);
    INSERT INTO `teltonika`.`debug_beacon_count` (`sector`,`count`,`timestamp`)
    VALUES(CONCAT('Sector ', sector_num), minutos_diferencia, CURRENT_TIMESTAMP());
    
    
	IF minutos_diferencia IS NULL OR minutos_diferencia <= min_rojo THEN
		SET sector_status = 'Negro';
	ELSEIF minutos_diferencia > min_rojo AND minutos_diferencia <= max_rojo THEN
		SET sector_status = 'Rojo';
	ELSEIF minutos_diferencia > min_amarillo AND minutos_diferencia <= max_amarillo THEN
		SET sector_status = 'Amarillo';
	ELSE
		SET sector_status = 'Verde';
	END IF;
    
END$$

DELIMITER ;
USE `teltonica_dev`;

DELIMITER $$

USE `teltonica_dev`$$
DROP TRIGGER IF EXISTS `teltonica_dev`.`trigger_nuevo_dato_GPS_data_table` $$
USE `teltonica_dev`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `trigger_nuevo_dato_GPS_data_table` AFTER INSERT ON `gps_data` FOR EACH ROW
BEGIN
    -- Variables utilizadas en el trigger
    DECLARE EYE_battery_low TINYINT DEFAULT NULL;
    DECLARE EYE_humidity INT DEFAULT NULL;
    DECLARE EYE_id VARCHAR(50) DEFAULT NULL;
    DECLARE EYE_mac_address VARCHAR(50) DEFAULT NULL;
    DECLARE EYE_magnet TINYINT DEFAULT NULL;
    DECLARE EYE_magnet_count INT DEFAULT NULL;
    DECLARE EYE_movement TINYINT DEFAULT NULL;
    DECLARE EYE_movement_count INT DEFAULT NULL;
    DECLARE EYE_temperature DECIMAL(5,2) DEFAULT NULL;
    DECLARE EYE_type VARCHAR(45) DEFAULT NULL;
    DECLARE temp_beacon_id VARCHAR(50) DEFAULT NULL;
    
    -- Variables para extraer datos del caso 385
    DECLARE KTK_ID VARCHAR(50) DEFAULT NULL;
    DECLARE KTK_battery_voltage INT DEFAULT NULL;
    DECLARE KTK_RSSI INT DEFAULT NULL;
    DECLARE KTK_TEMPERATURE FLOAT DEFAULT NULL;
    
    -- Variables para loop
    DECLARE counter INT DEFAULT 0;
    DECLARE array_length INT DEFAULT 0;
    DECLARE highest_rssi INT DEFAULT -999999;
    DECLARE json_element JSON DEFAULT NULL;
    DECLARE json_data JSON DEFAULT NULL;
    DECLARE highest_rssi_element JSON DEFAULT NULL;
    -- TEXTO DE ble_beacon
    DECLARE texto_original_ble_beacon VARCHAR(10000);
    DECLARE esPuerta_Bucle TINYINT;
    DECLARE esPuerta_11317 TINYINT;
    
    -- Convertir la cadena a JSON
    SET json_data = NEW.ble_beacon;
    
    -- INICIO CASO EVENT.ENUM = 385
    IF NEW.event_enum = 385 THEN
        SET array_length = JSON_LENGTH(json_data);
        WHILE counter < array_length DO
            -- Extraer el elemento JSON en el √≠ndice actual
            SET json_element = JSON_EXTRACT(json_data, CONCAT('$[', counter, ']'));
            
            -- Extraer el valor RSSI del elemento JSON actual
            SET @rssi = CAST(JSON_UNQUOTE(JSON_EXTRACT(json_element, '$.rssi')) AS SIGNED);
            SET @id = JSON_UNQUOTE(JSON_EXTRACT(json_element, '$.id'));
            SELECT esPuerta INTO esPuerta_Bucle FROM beacons WHERE id_beacons = @id;
            
            -- Verificar si este valor RSSI es mayor que el actual m√°s alto
            IF @rssi > highest_rssi AND esPuerta_Bucle = 0 THEN
                SET highest_rssi = @rssi;
                SET highest_rssi_element = json_element;
            END IF;
            SET counter = counter + 1;
        END WHILE;

        -- Obtener los datos del elemento con el rssi m√°s alto
        SET KTK_ID = JSON_UNQUOTE(JSON_EXTRACT(highest_rssi_element, '$.id'));
        SET KTK_battery_voltage = JSON_UNQUOTE(JSON_EXTRACT(highest_rssi_element, '$.battery.voltage'));
        SET KTK_RSSI = JSON_UNQUOTE(JSON_EXTRACT(highest_rssi_element, '$.rssi'));
        SET KTK_TEMPERATURE = JSON_UNQUOTE(JSON_EXTRACT(highest_rssi_element, '$.temperature'));
        
        -- Insertar datos en la tabla EYE_KTK_CommonData y KTK_Specific_Data
        INSERT INTO `teltonica_dev`.`EYE_KTK_CommonData`
            (`id_dispositivo`, `id_gps_data`, `event_enum`, `altitude`, `latitude`, `longitude`,
             `commonDataTimestamp`, `beacon_id`)
        VALUES
            (NEW.device_id, NEW.id_gps_data, NEW.event_enum, NEW.altitude, NEW.latitude, NEW.longitude,
             NEW.timestamp, KTK_ID);
        
        INSERT INTO `teltonica_dev`.`KTK_Specific_Data`
            (`idKTK_Specific_Data`, `rssi_beacon`, `battery_level`, `ble_sensor_humidity`,
             `ble_sensor_magnet_status`, `ble_sensor_temperature`)
        VALUES
            (LAST_INSERT_ID(), KTK_RSSI, NEW.battery_level, NEW.ble_sensor_humidity_1,
             NEW.ble_sensor_magnet_status_1, KTK_TEMPERATURE);
    END IF;

    -- INICIO CASO EVENT.ENUM = 11317
    IF NEW.event_enum = 11317 THEN
        SET texto_original_ble_beacon = NEW.ble_beacon;
        SET json_element = JSON_EXTRACT(json_data, '$[0]');
        
        CALL ObtenerValorString(texto_original_ble_beacon, 'mac.address', EYE_mac_address);
        SELECT esPuerta INTO esPuerta_11317 FROM beacons WHERE mac = EYE_mac_address;

        IF EYE_mac_address IS NOT NULL AND EYE_mac_address <> '' THEN
            SELECT id_beacons INTO temp_beacon_id FROM beacons WHERE mac = EYE_mac_address;
        ELSE
            SET temp_beacon_id = CONCAT('no encontrado: ', IFNULL(EYE_mac_address, 'NULL'));
        END IF;
        
        CALL ObtenerValorString(texto_original_ble_beacon, 'battery.low', EYE_battery_low);
        CALL ObtenerValorString(texto_original_ble_beacon, 'humidity', EYE_humidity);
        CALL ObtenerValorString(texto_original_ble_beacon, 'id', EYE_id);
        CALL ObtenerValorString(texto_original_ble_beacon, 'magnet', EYE_magnet);
        CALL ObtenerValorString(texto_original_ble_beacon, 'magnet.count', EYE_magnet_count);
        CALL ObtenerValorString(texto_original_ble_beacon, 'movement', EYE_movement);
        CALL ObtenerValorString(texto_original_ble_beacon, 'movement.count', EYE_movement_count);
        CALL ObtenerValorString(texto_original_ble_beacon, 'temperature', EYE_temperature);
        CALL ObtenerValorString(texto_original_ble_beacon, 'type', EYE_type);
        
        -- Insertar datos en la tabla EYE_KTK_CommonData y EYE_Specific_Data
        IF esPuerta_11317 = 0 THEN
            INSERT INTO `teltonica_dev`.`EYE_KTK_CommonData`
                (`id_dispositivo`, `id_gps_data`, `event_enum`, `altitude`, `latitude`, `longitude`,
                 `commonDataTimestamp`, `beacon_id`)
            VALUES
                (NEW.device_id, NEW.id_gps_data, NEW.event_enum, NEW.altitude, NEW.latitude, NEW.longitude,
                 NEW.timestamp, temp_beacon_id);
            
            INSERT INTO `teltonica_dev`.`EYE_Specific_Data`
                (`id_EYE_Specific_Data`, `battery.low`, `humidity`, `EYE_id`, `mac_address`, `magnet`,
                 `magnent_count`, `movement`, `movemnt_count`, `temperature`, `type`)
            VALUES
                (LAST_INSERT_ID(), EYE_battery_low, EYE_humidity, EYE_id, EYE_mac_address, EYE_magnet,
                 EYE_magnet_count, EYE_movement, EYE_movement_count, EYE_temperature, EYE_type);
        END IF;
    END IF;
END$$


USE `teltonica_dev`$$
DROP TRIGGER IF EXISTS `teltonica_dev`.`triggerGPSDATAaDoorStatus` $$
USE `teltonica_dev`$$
CREATE DEFINER=`root`@`%` TRIGGER `triggerGPSDATAaDoorStatus` AFTER INSERT ON `gps_data` FOR EACH ROW BEGIN
    DECLARE mac_address VARCHAR(45);
    DECLARE es_puerta TINYINT;
    DECLARE temperatura DECIMAL(5,2);
    DECLARE status_magnetico TINYINT;
    DECLARE raw_data JSON;
    DECLARE nombre_sector VARCHAR(45);
    DECLARE tiempo BIGINT;
    DECLARE tiempo_formateado DATETIME;
    
    
    IF NEW.event_enum = 11317 THEN
        SET raw_data = NEW.ble_beacon;
        SET tiempo = UNIX_TIMESTAMP(NEW.timestamp);
        CALL ObtenerValorString(raw_data, 'mac.address', mac_address);
        SELECT esPuerta INTO es_puerta FROM beacons WHERE id_beacons = mac_address;
        IF es_puerta = 1 THEN
            CALL ObtenerValorString(raw_data, 'temperature', temperatura);
            CALL ObtenerValorString(raw_data, 'magnet', status_magnetico);
            SELECT sector INTO nombre_sector FROM beacons WHERE id_beacons = mac_address;
            SET tiempo_formateado = FROM_UNIXTIME(tiempo);
            INSERT INTO door_status (sector, magnet_status, temperature, timestamp)
            VALUES (nombre_sector, status_magnetico, temperatura, tiempo_formateado);
        END IF;
    END IF;
END;$$


USE `teltonica_dev`$$
DROP TRIGGER IF EXISTS `teltonica_dev`.`trigger_GPS_registro_temperatura` $$
USE `teltonica_dev`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `trigger_GPS_registro_temperatura` AFTER INSERT ON `gps_data` FOR EACH ROW BEGIN
    DECLARE json_data JSON DEFAULT NEW.ble_beacon;
    DECLARE array_length INT DEFAULT JSON_LENGTH(json_data);
    DECLARE counter INT DEFAULT 0;
    DECLARE json_element JSON;
    DECLARE temperatura DECIMAL(5,2);
    DECLARE mac_address VARCHAR(45);
    DECLARE es_Temperatura TINYINT;
    DECLARE beacon_id VARCHAR(50);

    WHILE counter < array_length DO
        SET json_element = JSON_EXTRACT(json_data, CONCAT('$[', counter, ']'));
        SET temperatura = JSON_EXTRACT(json_element, '$.temperature');
        INSERT INTO teltonica_dev.process_log(message) VALUES(temperatura);
        IF temperatura IS NOT NULL THEN
            SET mac_address = JSON_UNQUOTE(JSON_EXTRACT(json_element, '$.mac.address'));
            IF mac_address IS NOT NULL THEN
                SELECT id_beacons, esTemperatura INTO beacon_id, es_Temperatura 
                FROM teltonica_dev.beacons 
                WHERE mac = mac_address;
                INSERT INTO teltonica_dev.process_log(message) VALUES (CONCAT(mac_address, ' esTemperatura:_',es_Temperatura));
            ELSE
                SET beacon_id = JSON_UNQUOTE(JSON_EXTRACT(json_element, '$.id'));
                SELECT esTemperatura INTO es_Temperatura 
                FROM teltonica_dev.beacons 
                WHERE id_beacons = beacon_id;
                INSERT INTO teltonica_dev.process_log(message) VALUES (CONCAT(beacon_id, ' esTemperatura:_',es_Temperatura));
            END IF;

            IF es_Temperatura = 1 THEN
                INSERT INTO teltonica_dev.registro_temperatura(beacon_id, timestamp, temperatura) 
                VALUES (beacon_id, FROM_UNIXTIME(NEW.timestamp), temperatura);
                INSERT INTO teltonica_dev.process_log(message) VALUES(concat("INSERT INTO teltonica_dev.registro_temperatura(beacon_id, timestamp, temperatura) 
                VALUES (beacon_id, FROM_UNIXTIME(NEW.timestamp),",temperatura));
            END IF;
        END IF;

        SET counter = counter + 1;
    END WHILE;

    -- Solo un log al final del proceso
    INSERT INTO teltonica_dev.process_log(message) VALUES("Proceso de registro de temperaturas completado");
END;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
